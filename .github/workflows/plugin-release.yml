#DONOTMERGE: This is for testing purposes only. All changes MUST be reverted before merging.
name: Plugin release

on:
  pull_request:
    branches:
      - main

permissions:
  contents: write
  id-token: write

jobs:
  build-release:
    runs-on: ubuntu-latest
    env:
      plugin-dist-folder: ./packages/grafana-llm-app/dist
      GRAFANA_API_KEY: ${{ secrets.GRAFANA_API_SIGNING_KEY }}
      GRAFANA_ACCESS_POLICY_TOKEN: ${{ secrets.GRAFANA_API_SIGNING_KEY }}      # Requires a Grafana API key from Grafana.com.

    outputs:
      upload-folder: ${{ steps.metadata.outputs.upload-folder }}
      version-tag: ${{ steps.metadata.outputs.plugin-version }}
      plugin-id: ${{ steps.metadata.outputs.plugin-id }}

    steps:
      - uses: tibdex/github-app-token@v1
        id: get_installation_token
        with:
          app_id: ${{ secrets.GRAFANA_MACHINE_LEARNING_GITHUB_APP_ID }}
          installation_id: ${{ secrets.GRAFANA_MACHINE_LEARNING_GITHUB_APP_INSTALLATION_ID }}
          private_key: ${{ secrets.GRAFANA_MACHINE_LEARNING_GITHUB_APP_PRIVATE_KEY }}

      - uses: actions/checkout@v3
        with:
          # Releases should always be made off of 'main'
          ref: 'main'
          fetch-depth: 0

      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Setup Go environment
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.1'

      - name: Store Go cache paths
        id: go-cache-paths
        run: echo "go-build=$(go env GOCACHE)" >> $GITHUB_OUTPUT

      - name: Restore go-build cache
        id: restore-go-build-cache
        uses: actions/cache/restore@v3
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-build-

      - name: Install utilities
        run: sudo apt-get install jq

      - name: Install Mage
        uses: magefile/mage-action@v3
        with:
            install-only: true

      - name: Install dependencies
        run: npm ci

      - name: Build plugin
        run: npm run build:all

      - name: Run frontend tests
        run: npm run test:ci

      - name: Run backend tests
        run: npm run backend:test

      - name: Warn missing Grafana API key
        run: |
          echo Please generate a Grafana API key: https://grafana.com/docs/grafana/latest/developers/plugins/sign-a-plugin/#generate-an-api-key
          echo Once done please follow the instructions found here: https://github.com/${{github.repository}}/blob/main/README.md#using-github-actions-release-workflow
        if: ${{ env.GRAFANA_API_KEY == '' }}

      - name: Get plugin metadata
        id: metadata
        run: |
          export GRAFANA_PLUGIN_ID=$(cat ${{ env.plugin-dist-folder }}/plugin.json | jq -r .id)
          export GRAFANA_PLUGIN_VERSION=$(cat ${{ env.plugin-dist-folder }}/plugin.json | jq -r .info.version)
          export GRAFANA_PLUGIN_TYPE=$(cat ${{ env.plugin-dist-folder }}/plugin.json | jq -r .type)
          export GRAFANA_PLUGIN_ARTIFACT=${GRAFANA_PLUGIN_ID}-${GRAFANA_PLUGIN_VERSION}.zip
          export GRAFANA_PLUGIN_ARTIFACT_CHECKSUM=${GRAFANA_PLUGIN_ARTIFACT}.md5
          
          export GRAFANA_PLUGIN_ARTIFACT_LATEST=${GRAFANA_PLUGIN_ID}-latest.zip
          export GRAFANA_PLUGIN_ARTIFACT_LATEST_CHECKSUM=${GRAFANA_PLUGIN_ARTIFACT_LATEST}.md5

          echo "plugin-id=${GRAFANA_PLUGIN_ID}" >> $GITHUB_OUTPUT
          echo "plugin-version=${GRAFANA_PLUGIN_VERSION}" >> $GITHUB_OUTPUT
          echo "plugin-type=${GRAFANA_PLUGIN_TYPE}" >> $GITHUB_OUTPUT
          echo "archive=${GRAFANA_PLUGIN_ARTIFACT}" >> $GITHUB_OUTPUT
          echo "archive-checksum=${GRAFANA_PLUGIN_ARTIFACT_CHECKSUM}" >> $GITHUB_OUTPUT
          echo "archive-latest=${GRAFANA_PLUGIN_ARTIFACT_LATEST}" >> $GITHUB_OUTPUT
          echo "archive-latest-checksum=${GRAFANA_PLUGIN_ARTIFACT_LATEST_CHECKSUM}" >> $GITHUB_OUTPUT
          echo "upload-folder=__to-upload__" >> $GITHUB_OUTPUT

      - name: Package plugin
        uses: sandersaarond/shared-workflows/actions/bundle-plugin@add-bundle-plugin
        with:
          distDir: ${{ env.plugin-dist-folder }}

## SECOND runthrough of packaging, for testing to make sure the binaries match
      - name: Sign build (second time)
        run: yarn dlx @grafana/sign-plugin@latest
        shell: bash
        working-directory: packages/grafana-llm-app

      - name: Package build (second time)
        uses: ./.github/actions/package-plugin
        with:
          plugin-directory: packages/grafana-llm-app

      - name: Compare package hashes
        run: |
          echo "=== Comparing package hashes between methods ==="
          echo "Files in __to-upload__:"
          find __to-upload__ -type f -exec sha256sum {} \; | sort
          
          echo -e "\nFiles in packages/grafana-llm-app/__packaging:"
          find packages/grafana-llm-app/__packaging -type f -exec sha256sum {} \; | sort
          
          echo -e "\nDetailed comparison:"
          for file in $(find __to-upload__ -type f -name "*.zip" -o -name "*.md5"); do
            basename=$(basename "$file")
            echo "Comparing $basename:"
            if [ -f "packages/grafana-llm-app/__packaging/$basename" ]; then
              echo "Original:  $(sha256sum "$file" | cut -d' ' -f1)"
              echo "New:       $(sha256sum "packages/grafana-llm-app/__packaging/$basename" | cut -d' ' -f1)"
              diff "$file" "packages/grafana-llm-app/__packaging/$basename" > /dev/null && echo "Files match!" || echo "Files differ!"
            else
              echo "WARNING: $basename not found in new packaging directory"
            fi
            echo
          done
