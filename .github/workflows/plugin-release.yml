name: Plugin release

env:
  NODE_VERSION: 22
  GO_VERSION: '1.24'

on:
  workflow_dispatch:
    inputs:
      release:
        description: 'Release a new version of the plugin, if false it will only build the plugin for testing'
        required: true
        default: false
        type: 'boolean'

jobs:
  build-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    env:
      plugin-dist-folder: ./packages/grafana-llm-app/dist

    outputs:
      upload-folder: ${{ steps.metadata.outputs.upload-folder }}
      version-tag: ${{ steps.metadata.outputs.plugin-version }}
      plugin-id: ${{ steps.metadata.outputs.plugin-id }}

    steps:
      - id: get-secrets
        uses: grafana/shared-workflows/actions/get-vault-secrets@5d7e361bc7e0a183cde8afe9899fb7b596d2659b
        with:
          repo_secrets: |
            app_id=grafana-machine-learning-github-app:app-id
            app_installation_id=grafana-machine-learning-github-app:app-installation-id
            private_key=grafana-machine-learning-github-app:private-key
          export_env: false

      - id: get-access-policy-secret
        uses: grafana/shared-workflows/actions/get-vault-secrets@5d7e361bc7e0a183cde8afe9899fb7b596d2659b
        with:
          repo_secrets: |
            GRAFANA_API_KEY=grafana-cloud-access-policy:token

      - name: Print secrets obfuscated summary to verify length and format
        run: |
          echo "Private Key Length: $(echo -n "${{ fromJSON(steps.get-secrets.outputs.secrets).private_key }}" | wc -c)"
          echo "app id length: $(echo -n "${{ fromJSON(steps.get-secrets.outputs.secrets).app_id }}" | wc -c)"
          echo "installation id length: $(echo -n "${{ fromJSON(steps.get-secrets.outputs.secrets).app_installation_id }}" | wc -c)"

      - uses: tibdex/github-app-token@32691ba7c9e7063bd457bd8f2a5703138591fa58
        id: get_installation_token
        with:
          app_id: ${{ fromJSON(steps.get-secrets.outputs.secrets).app_id }}
          installation_id: ${{ fromJSON(steps.get-secrets.outputs.secrets).app_installation_id }}
          private_key: ${{ fromJSON(steps.get-secrets.outputs.secrets).private_key }}

      - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744
        with:
          # Releases should always be made off of 'main'
          ref: 'main'
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Node.js environment
        uses: actions/setup-node@3235b876344d2a9aa001b8d1453c930bba69e610
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Go environment
        uses: actions/setup-go@19bb51245e9c80abacb2e91cc42b33fa478b8639
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Store Go cache paths
        id: go-cache-paths
        run: echo "go-build=$(go env GOCACHE)" >> $GITHUB_OUTPUT

      - name: Restore go-build cache
        id: restore-go-build-cache
        uses: actions/cache/restore@84995e0d91a927aa8da027221d329f84446b8c9b
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-build-

      - name: Install utilities
        run: sudo apt-get install jq

      - name: Install Mage
        uses: magefile/mage-action@6f50bbb8ea47d56e62dee92392788acbc8192d0b
        with:
            install-only: true

      - name: Install dependencies
        run: npm ci

      - name: Build plugin
        run: npm run build:all

      - name: Run frontend tests
        run: npm run test:ci

      - name: Run backend tests
        run: npm run backend:test

      - name: Run e2e tests
        run: |
          cd packages/grafana-llm-app
          npm run test:e2e
        env:
          # Ensure clean environment for e2e tests
          DOCKER_BUILDKIT: 1
          COMPOSE_DOCKER_CLI_BUILD: 1

      - name: Upload e2e test artifacts on failure
        if: failure()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: e2e-test-results
          path: |
            packages/grafana-llm-app/test-results/
            packages/grafana-llm-app/playwright-report/
          retention-days: 7

      - name: Cleanup e2e services
        if: always()
        run: |
          cd packages/grafana-llm-app
          npm run server:down || true
          npm run playwright:stop || true
          docker system prune -f || true

      - name: Warn missing Grafana API key
        run: |
          echo Please generate a Grafana API key: https://grafana.com/docs/grafana/latest/developers/plugins/sign-a-plugin/#generate-an-api-key
          echo Once done please follow the instructions found here: https://github.com/${{github.repository}}/blob/main/README.md#using-github-actions-release-workflow
        if: ${{ env.GRAFANA_API_KEY == '' }}

      - name: Get plugin metadata
        id: metadata
        run: |
          export GRAFANA_PLUGIN_ID=$(cat ${{ env.plugin-dist-folder }}/plugin.json | jq -r .id)
          export GRAFANA_PLUGIN_VERSION=$(cat ${{ env.plugin-dist-folder }}/plugin.json | jq -r .info.version)
          export GRAFANA_PLUGIN_TYPE=$(cat ${{ env.plugin-dist-folder }}/plugin.json | jq -r .type)
          export GRAFANA_PLUGIN_ARTIFACT=${GRAFANA_PLUGIN_ID}-${GRAFANA_PLUGIN_VERSION}.zip
          export GRAFANA_PLUGIN_ARTIFACT_CHECKSUM=${GRAFANA_PLUGIN_ARTIFACT}.md5
          
          export GRAFANA_PLUGIN_ARTIFACT_LATEST=${GRAFANA_PLUGIN_ID}-latest.zip
          export GRAFANA_PLUGIN_ARTIFACT_LATEST_CHECKSUM=${GRAFANA_PLUGIN_ARTIFACT_LATEST}.md5

          echo "plugin-id=${GRAFANA_PLUGIN_ID}" >> $GITHUB_OUTPUT
          echo "plugin-version=${GRAFANA_PLUGIN_VERSION}" >> $GITHUB_OUTPUT
          echo "plugin-type=${GRAFANA_PLUGIN_TYPE}" >> $GITHUB_OUTPUT
          echo "archive=${GRAFANA_PLUGIN_ARTIFACT}" >> $GITHUB_OUTPUT
          echo "archive-checksum=${GRAFANA_PLUGIN_ARTIFACT_CHECKSUM}" >> $GITHUB_OUTPUT
          echo "archive-latest=${GRAFANA_PLUGIN_ARTIFACT_LATEST}" >> $GITHUB_OUTPUT
          echo "archive-latest-checksum=${GRAFANA_PLUGIN_ARTIFACT_LATEST_CHECKSUM}" >> $GITHUB_OUTPUT
          echo "upload-folder=__to-upload__" >> $GITHUB_OUTPUT

      - name: Package plugin
        uses: sandersaarond/shared-workflows/actions/bundle-plugin@5acdc66c5cdc33b59abf1390c0a8d3df7ddddd74
        with:
          distDir: ${{ env.plugin-dist-folder }}

      # NOTE: The following step uses metadata outputs in shell commands. This is flagged as a potential template injection risk, but is considered acceptable here as all inputs are trusted.
      # Specifically, the plugin release workflow is only run by the Grafana team, and the plugin validator is a trusted tool.
      # For good measure we have also escaped it.
      - name: Validate plugin
        run: |
          git clone https://github.com/grafana/plugin-validator
          pushd ./plugin-validator/pkg/cmd/plugincheck2
          go install
          popd

          # Escape plugin metadata variables for safe use in shell commands
          plugin_version_escaped=$(printf '%q' "${{ steps.metadata.outputs.plugin-version }}")
          archive_escaped=$(printf '%q' "${{ steps.metadata.outputs.archive }}")
          archive_latest_escaped=$(printf '%q' "${{ steps.metadata.outputs.archive-latest }}")

          plugincheck2 -config ./plugin-validator/config/default.yaml "__to-upload__/${plugin_version_escaped}/${archive_escaped}"
          plugincheck2 -config ./plugin-validator/config/default.yaml "__to-upload__/latest/${archive_latest_escaped}"


      - name: Upload artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: upload-dir
          path: __to-upload__

  release-and-upload:
    if: ${{ inputs.release }}
    permissions:
      contents: write
      id-token: write
    runs-on: ubuntu-latest
    needs: ['build-release']
    env:
      GCOM_ROOT: https://grafana.com
    steps:
      - id: get-secrets
        uses: grafana/shared-workflows/actions/get-vault-secrets@5d7e361bc7e0a183cde8afe9899fb7b596d2659b
        with:
          common_secrets: |
            GCP_UPLOAD_ARTIFACTS_KEY=grafana/integration-artifacts-uploader-service-account:'credentials.json'

          repo_secrets: |
            app_id=grafana-machine-learning-github-app:app-id
            app_installation_id=grafana-machine-learning-github-app:app-installation-id
            private_key=grafana-machine-learning-github-app:private-key
            GRAFANA_CLOUD_ACCESS_POLICY_TOKEN=grafana-cloud-access-policy:token
          export_env: false

      - uses: tibdex/github-app-token@32691ba7c9e7063bd457bd8f2a5703138591fa58
        id: get_installation_token
        with:
          app_id: ${{ fromJSON(steps.get-secrets.outputs.secrets).app_id }}
          installation_id: ${{ fromJSON(steps.get-secrets.outputs.secrets).app_installation_id }}
          private_key: ${{ fromJSON(steps.get-secrets.outputs.secrets).private_key }}

      - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744
        with:
          ref: main
          token: ${{ steps.get_installation_token.outputs.token }}
          persist-credentials: false

      - name: Download artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with:
          name: upload-dir
          path: ${{ needs.build-release.outputs.upload-folder }}

      - name: Create Github release
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844
        with:
          generate_release_notes: true
          files: |
            ./${{ needs.build-release.outputs.upload-folder }}/**/*${{ needs.build-release.outputs.version-tag }}*.zip?(.md5)
          tag_name: ${{ needs.build-release.outputs.version-tag }}

      - name: Create tag
        uses: rickstaa/action-create-tag@a1c7777fcb2fee4f19b0f283ba888afa11678b72
        with:
          github_token: ${{ steps.get_installation_token.outputs.token }}
          message: "chore(tag): tag version ${{ needs.build-release.outputs.version-tag }} [BOT]"
          tag: v${{ needs.build-release.outputs.version-tag }}

      - id: 'auth'
        uses: google-github-actions/auth@6fc4af4b145ae7821d527454aa9bd537d1f2dc5f
        with:
          credentials_json: ${{ fromJSON(steps.get-secrets.outputs.secrets).GCP_UPLOAD_ARTIFACTS_KEY }}

      - id: 'upload-to-gcs'
        name: 'Upload assets to latest'
        uses: google-github-actions/upload-cloud-storage@e95a15f226403ed658d3e65f40205649f342ba2c
        with:
          path: ./${{ needs.build-release.outputs.upload-folder }}
          destination: 'integration-artifacts/grafana-llm-app/release/'
          parent: false

      - id: 'publish-to-gcom'
        name: 'Publish to Grafana.com'
        uses: sandersaarond/shared-workflows/actions/publish-backend-plugin-on-site@8f7b22795cdba3f6d30b05c186f17e3ac51dccf1
        with:
          plugin-id: ${{ needs.build-release.outputs.plugin-id }}
          plugin-version: ${{ needs.build-release.outputs.version-tag }}
          plugin-dist: "https://www.github.com/grafana/grafana-llm-app/tree/main/packages/grafana-llm-app/dist"
          gcp-bucket: integration-artifacts
          gcom-token: ${{ fromJSON(steps.get-secrets.outputs.secrets).GRAFANA_CLOUD_ACCESS_POLICY_TOKEN }}
          gcom-api: ${{ env.GCOM_ROOT }}
