## This action is used to package a Grafana plugin into distributables using a centralized package.sh script
## It is intended to be called from a workflow which handles building the plugin before calling this action and pushing the built plugin to file storage afterwards
## Decoupling the build and packaging steps allows using this in projects which have different build and test tooling, especially surrounding typescript compilation
## It is meant to be maximally maintainable and reusable, which is why the bulk of the logic is in the package.sh script, which should run anywhere and be legible to most engineers
## It addresses the cases where we want to package a plugin for more than one platform (e.g., windows, macos, linux, amd, arm, etc.)
## It also addresses cases where we may have a plugin which is not in document root, but rather in a subdirectory
## Those cases were not well addressed by existing tooling

name: "Package Grafana Plugin"
description: "Packages a Grafana plugin into distributables using a centralized package.sh script"
inputs:
  plugin-directory:
    description: "Directory containing the built plugin with dist/ directory"
    required: true
    default: "."
outputs:
  output-dir:
    description: "Path to the directory containing packaged plugin files"
    value: ${{ steps.package.outputs.output-dir }}

runs:
  using: "composite"
  steps:
    - name: Validate plugin directory input
      shell: bash
      env:
        PLUGIN_DIR: ${{ inputs.plugin-directory }}
      run: |
        # Check to make sure the plugin directory is within the current working directory
        # Resolve absolute paths for the plugin directory and the current working directory
        PLUGIN_DIR_ABS="$(realpath "$PLUGIN_DIR")"
        PWD_ABS="$(realpath "$PWD")"

        # Check if PLUGIN_DIR_ABS is NOT the same as PWD_ABS and NOT a subdirectory of it
        if [[ "$PLUGIN_DIR_ABS" != "$PWD_ABS" ]] && [[ "$PLUGIN_DIR_ABS" != "$PWD_ABS/"* ]]; then
          echo "Error: Plugin directory ($PLUGIN_DIR_ABS) is not inside the current working directory ($PWD_ABS)"
          exit 1
        fi

        # Validate directory exists
        if [ ! -d "$PLUGIN_DIR" ] || [ ! -r "$PLUGIN_DIR" ]; then
          echo "Error: Plugin directory does not exist or is not readable"
          exit 1
        fi

    - name: Check plugin directory exists
      shell: bash
      env:
        PLUGIN_DIR: ${{ inputs.plugin-directory }}
      run: |
        if [ ! -d "$PLUGIN_DIR" ]; then
          echo "Error: Plugin directory not found: $PLUGIN_DIR"
          exit 1
        fi
        if [ ! -d "$PLUGIN_DIR/dist" ]; then
          echo "Error: dist/ directory not found in $PLUGIN_DIR"
          echo "Make sure the plugin has been built before packaging"
          exit 1
        fi

    - name: Package plugin
      id: package
      shell: bash
      env:
        PLUGIN_DIR: ${{ inputs.plugin-directory }}
      run: |
        echo "Executing: ${{ github.action_path }}/package.sh -d $PLUGIN_DIR"
        ${{ github.action_path }}/package.sh -d "$PLUGIN_DIR"

        # Set output variable
        echo "output-dir=$PLUGIN_DIR/__packaging" >> $GITHUB_OUTPUT

    - name: List generated packages
      shell: bash
      env:
        PLUGIN_DIR: ${{ inputs.plugin-directory }}
      run: |
        echo "Generated packages:"
        find "$PLUGIN_DIR/__packaging" -name "*.zip" | sort
